// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LanguageLearning.AcceptanceTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class NewUserOnboardingFeature : object, Xunit.IClassFixture<NewUserOnboardingFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "NewUserOnboarding", "  As a new user\r\n  I want to create a user profile\r\n  So that I can start using t" +
                "he language learning platform", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "NewUserOnboarding.feature"
#line hidden
        
        public NewUserOnboardingFeature(NewUserOnboardingFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully create a user profile")]
        [Xunit.TraitAttribute("FeatureTitle", "NewUserOnboarding")]
        [Xunit.TraitAttribute("Description", "Successfully create a user profile")]
        public async System.Threading.Tasks.Task SuccessfullyCreateAUserProfile()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Successfully create a user profile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "FirstName",
                            "John"});
                table5.AddRow(new string[] {
                            "LastName",
                            "Doe"});
                table5.AddRow(new string[] {
                            "Age",
                            "25"});
                table5.AddRow(new string[] {
                            "Gender",
                            "0"});
                table5.AddRow(new string[] {
                            "NativeLanguageId",
                            "1"});
                table5.AddRow(new string[] {
                            "CountryOfOrigin",
                            "1"});
                table5.AddRow(new string[] {
                            "CurrentCountry",
                            "1"});
                table5.AddRow(new string[] {
                            "Hobbies",
                            "2, 4"});
                table5.AddRow(new string[] {
                            "Interests",
                            "1, 2, 5"});
#line 7
    await testRunner.GivenAsync("a user provides valid details:", ((string)(null)), table5, "Given ");
#line hidden
#line 18
    await testRunner.WhenAsync("the user profile is created", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 19
    await testRunner.ThenAsync("the profile should be saved successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to create a user profile with missing first name")]
        [Xunit.TraitAttribute("FeatureTitle", "NewUserOnboarding")]
        [Xunit.TraitAttribute("Description", "Fail to create a user profile with missing first name")]
        public async System.Threading.Tasks.Task FailToCreateAUserProfileWithMissingFirstName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fail to create a user profile with missing first name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table6.AddRow(new string[] {
                            "FirstName",
                            ""});
                table6.AddRow(new string[] {
                            "LastName",
                            "Doe"});
                table6.AddRow(new string[] {
                            "Age",
                            "25"});
                table6.AddRow(new string[] {
                            "Gender",
                            "0"});
                table6.AddRow(new string[] {
                            "NativeLanguageId",
                            "1"});
                table6.AddRow(new string[] {
                            "CountryOfOrigin",
                            "1"});
                table6.AddRow(new string[] {
                            "CurrentCountry",
                            "1"});
                table6.AddRow(new string[] {
                            "Hobbies",
                            "2, 4"});
                table6.AddRow(new string[] {
                            "Interests",
                            "1, 2, 5"});
#line 22
    await testRunner.GivenAsync("a user provides incomplete details:", ((string)(null)), table6, "Given ");
#line hidden
#line 33
    await testRunner.WhenAsync("the user profile creation is attempted", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
    await testRunner.ThenAsync("the profile creation should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 35
    await testRunner.AndAsync("an error message \"FirstName is required\" should be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to create a user profile with missing last name")]
        [Xunit.TraitAttribute("FeatureTitle", "NewUserOnboarding")]
        [Xunit.TraitAttribute("Description", "Fail to create a user profile with missing last name")]
        public async System.Threading.Tasks.Task FailToCreateAUserProfileWithMissingLastName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fail to create a user profile with missing last name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "FirstName",
                            "John"});
                table7.AddRow(new string[] {
                            "LastName",
                            ""});
                table7.AddRow(new string[] {
                            "Age",
                            "25"});
                table7.AddRow(new string[] {
                            "Gender",
                            "0"});
                table7.AddRow(new string[] {
                            "NativeLanguageId",
                            "1"});
                table7.AddRow(new string[] {
                            "CountryOfOrigin",
                            "1"});
                table7.AddRow(new string[] {
                            "CurrentCountry",
                            "1"});
                table7.AddRow(new string[] {
                            "Hobbies",
                            "2, 4"});
                table7.AddRow(new string[] {
                            "Interests",
                            "1, 2, 5"});
#line 38
    await testRunner.GivenAsync("a user provides incomplete details:", ((string)(null)), table7, "Given ");
#line hidden
#line 49
    await testRunner.WhenAsync("the user profile creation is attempted", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
    await testRunner.ThenAsync("the profile creation should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 51
    await testRunner.AndAsync("an error message \"LastName is required\" should be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to create a user profile with missing hobbies")]
        [Xunit.TraitAttribute("FeatureTitle", "NewUserOnboarding")]
        [Xunit.TraitAttribute("Description", "Fail to create a user profile with missing hobbies")]
        public async System.Threading.Tasks.Task FailToCreateAUserProfileWithMissingHobbies()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fail to create a user profile with missing hobbies", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "FirstName",
                            "John"});
                table8.AddRow(new string[] {
                            "LastName",
                            "Doe"});
                table8.AddRow(new string[] {
                            "Age",
                            "25"});
                table8.AddRow(new string[] {
                            "Gender",
                            "0"});
                table8.AddRow(new string[] {
                            "NativeLanguageId",
                            "1"});
                table8.AddRow(new string[] {
                            "CountryOfOrigin",
                            "1"});
                table8.AddRow(new string[] {
                            "CurrentCountry",
                            "1"});
                table8.AddRow(new string[] {
                            "Hobbies",
                            ""});
                table8.AddRow(new string[] {
                            "Interests",
                            "1, 2, 5"});
#line 54
    await testRunner.GivenAsync("a user provides incomplete details:", ((string)(null)), table8, "Given ");
#line hidden
#line 65
    await testRunner.WhenAsync("the user profile creation is attempted", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 66
    await testRunner.ThenAsync("the profile creation should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 67
    await testRunner.AndAsync("an error message \"At least one hobby must be provided\" should be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to create a user profile with missing interests")]
        [Xunit.TraitAttribute("FeatureTitle", "NewUserOnboarding")]
        [Xunit.TraitAttribute("Description", "Fail to create a user profile with missing interests")]
        public async System.Threading.Tasks.Task FailToCreateAUserProfileWithMissingInterests()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fail to create a user profile with missing interests", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "FirstName",
                            "John"});
                table9.AddRow(new string[] {
                            "LastName",
                            "Doe"});
                table9.AddRow(new string[] {
                            "Age",
                            "25"});
                table9.AddRow(new string[] {
                            "Gender",
                            "0"});
                table9.AddRow(new string[] {
                            "NativeLanguageId",
                            "1"});
                table9.AddRow(new string[] {
                            "CountryOfOrigin",
                            "1"});
                table9.AddRow(new string[] {
                            "CurrentCountry",
                            "1"});
                table9.AddRow(new string[] {
                            "Hobbies",
                            "2, 4"});
                table9.AddRow(new string[] {
                            "Interests",
                            ""});
#line 70
    await testRunner.GivenAsync("a user provides incomplete details:", ((string)(null)), table9, "Given ");
#line hidden
#line 81
    await testRunner.WhenAsync("the user profile creation is attempted", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 82
    await testRunner.ThenAsync("the profile creation should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 83
    await testRunner.AndAsync("an error message \"At least one interest must be provided\" should be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to create a user profile with invalid age")]
        [Xunit.TraitAttribute("FeatureTitle", "NewUserOnboarding")]
        [Xunit.TraitAttribute("Description", "Fail to create a user profile with invalid age")]
        public async System.Threading.Tasks.Task FailToCreateAUserProfileWithInvalidAge()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fail to create a user profile with invalid age", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table10.AddRow(new string[] {
                            "FirstName",
                            "John"});
                table10.AddRow(new string[] {
                            "LastName",
                            "Doe"});
                table10.AddRow(new string[] {
                            "Age",
                            "-25"});
                table10.AddRow(new string[] {
                            "Gender",
                            "0"});
                table10.AddRow(new string[] {
                            "NativeLanguageId",
                            "1"});
                table10.AddRow(new string[] {
                            "CountryOfOrigin",
                            "1"});
                table10.AddRow(new string[] {
                            "CurrentCountry",
                            "1"});
                table10.AddRow(new string[] {
                            "Hobbies",
                            "2, 4"});
                table10.AddRow(new string[] {
                            "Interests",
                            "1, 2, 5"});
#line 86
    await testRunner.GivenAsync("a user provides invalid details:", ((string)(null)), table10, "Given ");
#line hidden
#line 97
    await testRunner.WhenAsync("the user profile creation is attempted", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 98
    await testRunner.ThenAsync("the profile creation should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 99
    await testRunner.AndAsync("an error message \"Age must be greater than 3\" should be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to create a user profile with invalid first name")]
        [Xunit.TraitAttribute("FeatureTitle", "NewUserOnboarding")]
        [Xunit.TraitAttribute("Description", "Fail to create a user profile with invalid first name")]
        public async System.Threading.Tasks.Task FailToCreateAUserProfileWithInvalidFirstName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fail to create a user profile with invalid first name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table11.AddRow(new string[] {
                            "FirstName",
                            "1"});
                table11.AddRow(new string[] {
                            "LastName",
                            "Doe"});
                table11.AddRow(new string[] {
                            "Age",
                            "25"});
                table11.AddRow(new string[] {
                            "Gender",
                            "0"});
                table11.AddRow(new string[] {
                            "NativeLanguageId",
                            "1"});
                table11.AddRow(new string[] {
                            "CountryOfOrigin",
                            "1"});
                table11.AddRow(new string[] {
                            "CurrentCountry",
                            "1"});
                table11.AddRow(new string[] {
                            "Hobbies",
                            "2, 4"});
                table11.AddRow(new string[] {
                            "Interests",
                            "1, 2, 5"});
#line 102
    await testRunner.GivenAsync("a user provides invalid details:", ((string)(null)), table11, "Given ");
#line hidden
#line 113
    await testRunner.WhenAsync("the user profile creation is attempted", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 114
    await testRunner.ThenAsync("the profile creation should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 115
    await testRunner.AndAsync("an error message \"FirstName must contain only alphabetic characters\" should be di" +
                        "splayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to create a user profile with invalid last name")]
        [Xunit.TraitAttribute("FeatureTitle", "NewUserOnboarding")]
        [Xunit.TraitAttribute("Description", "Fail to create a user profile with invalid last name")]
        public async System.Threading.Tasks.Task FailToCreateAUserProfileWithInvalidLastName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fail to create a user profile with invalid last name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table12.AddRow(new string[] {
                            "FirstName",
                            "John"});
                table12.AddRow(new string[] {
                            "LastName",
                            "2"});
                table12.AddRow(new string[] {
                            "Age",
                            "25"});
                table12.AddRow(new string[] {
                            "Gender",
                            "0"});
                table12.AddRow(new string[] {
                            "NativeLanguageId",
                            "1"});
                table12.AddRow(new string[] {
                            "CountryOfOrigin",
                            "1"});
                table12.AddRow(new string[] {
                            "CurrentCountry",
                            "1"});
                table12.AddRow(new string[] {
                            "Hobbies",
                            "2, 4"});
                table12.AddRow(new string[] {
                            "Interests",
                            "1, 2, 5"});
#line 118
    await testRunner.GivenAsync("a user provides invalid details:", ((string)(null)), table12, "Given ");
#line hidden
#line 129
    await testRunner.WhenAsync("the user profile creation is attempted", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 130
    await testRunner.ThenAsync("the profile creation should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 131
    await testRunner.AndAsync("an error message \"LastName must contain only alphabetic characters\" should be dis" +
                        "played", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to create a user profile with invalid gender")]
        [Xunit.TraitAttribute("FeatureTitle", "NewUserOnboarding")]
        [Xunit.TraitAttribute("Description", "Fail to create a user profile with invalid gender")]
        public async System.Threading.Tasks.Task FailToCreateAUserProfileWithInvalidGender()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fail to create a user profile with invalid gender", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 133
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table13.AddRow(new string[] {
                            "FirstName",
                            "John"});
                table13.AddRow(new string[] {
                            "LastName",
                            "Doe"});
                table13.AddRow(new string[] {
                            "Age",
                            "25"});
                table13.AddRow(new string[] {
                            "Gender",
                            "-20"});
                table13.AddRow(new string[] {
                            "NativeLanguageId",
                            "1"});
                table13.AddRow(new string[] {
                            "CountryOfOrigin",
                            "1"});
                table13.AddRow(new string[] {
                            "CurrentCountry",
                            "1"});
                table13.AddRow(new string[] {
                            "Hobbies",
                            "2, 4"});
                table13.AddRow(new string[] {
                            "Interests",
                            "1, 2, 5"});
#line 134
    await testRunner.GivenAsync("a user provides invalid details:", ((string)(null)), table13, "Given ");
#line hidden
#line 145
    await testRunner.WhenAsync("the user profile creation is attempted", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 146
    await testRunner.ThenAsync("the profile creation should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 147
    await testRunner.AndAsync("an error message \"Gender must be one of the predefined values\" should be displaye" +
                        "d", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to create a user profile with invalid native language ID")]
        [Xunit.TraitAttribute("FeatureTitle", "NewUserOnboarding")]
        [Xunit.TraitAttribute("Description", "Fail to create a user profile with invalid native language ID")]
        public async System.Threading.Tasks.Task FailToCreateAUserProfileWithInvalidNativeLanguageID()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fail to create a user profile with invalid native language ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 149
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table14.AddRow(new string[] {
                            "FirstName",
                            "John"});
                table14.AddRow(new string[] {
                            "LastName",
                            "Doe"});
                table14.AddRow(new string[] {
                            "Age",
                            "25"});
                table14.AddRow(new string[] {
                            "Gender",
                            "0"});
                table14.AddRow(new string[] {
                            "NativeLanguageId",
                            "-31"});
                table14.AddRow(new string[] {
                            "CountryOfOrigin",
                            "1"});
                table14.AddRow(new string[] {
                            "CurrentCountry",
                            "1"});
                table14.AddRow(new string[] {
                            "Hobbies",
                            "2, 4"});
                table14.AddRow(new string[] {
                            "Interests",
                            "1, 2, 5"});
#line 150
    await testRunner.GivenAsync("a user provides invalid details:", ((string)(null)), table14, "Given ");
#line hidden
#line 161
    await testRunner.WhenAsync("the user profile creation is attempted", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 162
    await testRunner.ThenAsync("the profile creation should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 163
    await testRunner.AndAsync("an error message \"Native language ID must be greater than 0\" should be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to create a user profile with invalid country of origin")]
        [Xunit.TraitAttribute("FeatureTitle", "NewUserOnboarding")]
        [Xunit.TraitAttribute("Description", "Fail to create a user profile with invalid country of origin")]
        public async System.Threading.Tasks.Task FailToCreateAUserProfileWithInvalidCountryOfOrigin()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fail to create a user profile with invalid country of origin", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 165
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table15.AddRow(new string[] {
                            "FirstName",
                            "John"});
                table15.AddRow(new string[] {
                            "LastName",
                            "Doe"});
                table15.AddRow(new string[] {
                            "Age",
                            "25"});
                table15.AddRow(new string[] {
                            "Gender",
                            "0"});
                table15.AddRow(new string[] {
                            "NativeLanguageId",
                            "1"});
                table15.AddRow(new string[] {
                            "CountryOfOrigin",
                            "-81"});
                table15.AddRow(new string[] {
                            "CurrentCountry",
                            "1"});
                table15.AddRow(new string[] {
                            "Hobbies",
                            "2, 4"});
                table15.AddRow(new string[] {
                            "Interests",
                            "1, 2, 5"});
#line 166
    await testRunner.GivenAsync("a user provides invalid details:", ((string)(null)), table15, "Given ");
#line hidden
#line 177
    await testRunner.WhenAsync("the user profile creation is attempted", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 178
    await testRunner.ThenAsync("the profile creation should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 179
    await testRunner.AndAsync("an error message \"Country of origin ID must be greater than 0\" should be displaye" +
                        "d", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to create a user profile with invalid current country")]
        [Xunit.TraitAttribute("FeatureTitle", "NewUserOnboarding")]
        [Xunit.TraitAttribute("Description", "Fail to create a user profile with invalid current country")]
        public async System.Threading.Tasks.Task FailToCreateAUserProfileWithInvalidCurrentCountry()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fail to create a user profile with invalid current country", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 181
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table16 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table16.AddRow(new string[] {
                            "FirstName",
                            "John"});
                table16.AddRow(new string[] {
                            "LastName",
                            "Doe"});
                table16.AddRow(new string[] {
                            "Age",
                            "25"});
                table16.AddRow(new string[] {
                            "Gender",
                            "0"});
                table16.AddRow(new string[] {
                            "NativeLanguageId",
                            "1"});
                table16.AddRow(new string[] {
                            "CountryOfOrigin",
                            "1"});
                table16.AddRow(new string[] {
                            "CurrentCountry",
                            "-91"});
                table16.AddRow(new string[] {
                            "Hobbies",
                            "2, 4"});
                table16.AddRow(new string[] {
                            "Interests",
                            "1, 2, 5"});
#line 182
    await testRunner.GivenAsync("a user provides invalid details:", ((string)(null)), table16, "Given ");
#line hidden
#line 193
    await testRunner.WhenAsync("the user profile creation is attempted", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 194
    await testRunner.ThenAsync("the profile creation should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 195
    await testRunner.AndAsync("an error message \"Current country ID must be greater than 0\" should be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to create a user profile with invalid hobbies")]
        [Xunit.TraitAttribute("FeatureTitle", "NewUserOnboarding")]
        [Xunit.TraitAttribute("Description", "Fail to create a user profile with invalid hobbies")]
        public async System.Threading.Tasks.Task FailToCreateAUserProfileWithInvalidHobbies()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fail to create a user profile with invalid hobbies", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 197
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table17 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table17.AddRow(new string[] {
                            "FirstName",
                            "John"});
                table17.AddRow(new string[] {
                            "LastName",
                            "Doe"});
                table17.AddRow(new string[] {
                            "Age",
                            "25"});
                table17.AddRow(new string[] {
                            "Gender",
                            "0"});
                table17.AddRow(new string[] {
                            "NativeLanguageId",
                            "1"});
                table17.AddRow(new string[] {
                            "CountryOfOrigin",
                            "1"});
                table17.AddRow(new string[] {
                            "CurrentCountry",
                            "1"});
                table17.AddRow(new string[] {
                            "Hobbies",
                            "2, -4"});
                table17.AddRow(new string[] {
                            "Interests",
                            "1, 2, 5"});
#line 198
    await testRunner.GivenAsync("a user provides invalid details:", ((string)(null)), table17, "Given ");
#line hidden
#line 209
    await testRunner.WhenAsync("the user profile creation is attempted", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 210
    await testRunner.ThenAsync("the profile creation should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 211
    await testRunner.AndAsync("an error message \"Each hobby ID must be greater than 0\" should be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to create a user profile with invalid interests")]
        [Xunit.TraitAttribute("FeatureTitle", "NewUserOnboarding")]
        [Xunit.TraitAttribute("Description", "Fail to create a user profile with invalid interests")]
        public async System.Threading.Tasks.Task FailToCreateAUserProfileWithInvalidInterests()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fail to create a user profile with invalid interests", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 213
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table18 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table18.AddRow(new string[] {
                            "FirstName",
                            "John"});
                table18.AddRow(new string[] {
                            "LastName",
                            "Doe"});
                table18.AddRow(new string[] {
                            "Age",
                            "25"});
                table18.AddRow(new string[] {
                            "Gender",
                            "0"});
                table18.AddRow(new string[] {
                            "NativeLanguageId",
                            "1"});
                table18.AddRow(new string[] {
                            "CountryOfOrigin",
                            "1"});
                table18.AddRow(new string[] {
                            "CurrentCountry",
                            "1"});
                table18.AddRow(new string[] {
                            "Hobbies",
                            "2, 4"});
                table18.AddRow(new string[] {
                            "Interests",
                            "1, -2, 5"});
#line 214
    await testRunner.GivenAsync("a user provides invalid details:", ((string)(null)), table18, "Given ");
#line hidden
#line 225
    await testRunner.WhenAsync("the user profile creation is attempted", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 226
    await testRunner.ThenAsync("the profile creation should fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 227
    await testRunner.AndAsync("an error message \"Each interest ID must be greater than 0\" should be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await NewUserOnboardingFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await NewUserOnboardingFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
