// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LanguageLearning.AcceptanceTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreatingAPersonalizedLanguageLearningJourneyFeature : object, Xunit.IClassFixture<CreatingAPersonalizedLanguageLearningJourneyFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Creating a Personalized Language Learning Journey", "As a language learner\r\nI want to create a personalized learning journey for my ta" +
                "rget language\r\nSo that I can systematically improve my language skills with AI-g" +
                "enerated learning paths", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreatingPersonalizedLanguageLearningJourney.feature"
#line hidden
        
        public CreatingAPersonalizedLanguageLearningJourneyFeature(CreatingAPersonalizedLanguageLearningJourneyFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Creating a learning journey with personalized learning path")]
        [Xunit.TraitAttribute("FeatureTitle", "Creating a Personalized Language Learning Journey")]
        [Xunit.TraitAttribute("Description", "Creating a learning journey with personalized learning path")]
        public async System.Threading.Tasks.Task CreatingALearningJourneyWithPersonalizedLearningPath()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Creating a learning journey with personalized learning path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await testRunner.GivenAsync("I am logged into the language learning application", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
await testRunner.WhenAsync("I select \"Spanish\" as my target language", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
await testRunner.AndAsync("I choose \"Business\" as my learning target", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Skill Type",
                            "Practice Minutes Per Day",
                            "Description"});
                table1.AddRow(new string[] {
                            "Reading",
                            "20",
                            "Want to read business reports and contracts"});
                table1.AddRow(new string[] {
                            "Writing",
                            "15",
                            "Need to write professional emails"});
                table1.AddRow(new string[] {
                            "Listening",
                            "30",
                            "Understand business meetings and calls"});
                table1.AddRow(new string[] {
                            "Speaking",
                            "25",
                            "Present and negotiate in Spanish"});
                table1.AddRow(new string[] {
                            "Grammar",
                            "10",
                            "Master formal grammar structures"});
                table1.AddRow(new string[] {
                            "Vocabulary",
                            "15",
                            "Focus on business and technical terms"});
#line 10
await testRunner.AndAsync("I create learning goals for each skill type:", ((string)(null)), table1, "And ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Skill Type",
                            "Proficiency Level"});
                table2.AddRow(new string[] {
                            "Reading",
                            "A2"});
                table2.AddRow(new string[] {
                            "Writing",
                            "A1"});
                table2.AddRow(new string[] {
                            "Listening",
                            "A2"});
                table2.AddRow(new string[] {
                            "Speaking",
                            "A1"});
                table2.AddRow(new string[] {
                            "Grammar",
                            "A1"});
                table2.AddRow(new string[] {
                            "Vocabulary",
                            "A2"});
#line 18
await testRunner.AndAsync("I provide my initial proficiency assessment:", ((string)(null)), table2, "And ");
#line hidden
#line 26
await testRunner.AndAsync("I submit my learning journey request", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
await testRunner.ThenAsync("the system should create a new Learning Journey", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 28
await testRunner.AndAsync("the system should generate a personalized Learning Path", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
await testRunner.AndAsync("the Learning Path should contain at least one Learning Sessions", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
await testRunner.AndAsync("each Learning Session should have at least one Learning Content", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
await testRunner.AndAsync("each Learning Session should have at least one Assessment Item", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
await testRunner.AndAsync("I should be notified that my Learning Journey has been created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Progressing through learning sessions in a path")]
        [Xunit.TraitAttribute("FeatureTitle", "Creating a Personalized Language Learning Journey")]
        [Xunit.TraitAttribute("Description", "Progressing through learning sessions in a path")]
        public async System.Threading.Tasks.Task ProgressingThroughLearningSessionsInAPath()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Progressing through learning sessions in a path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 35
await testRunner.GivenAsync("I have an active Learning Journey for \"Spanish\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 36
await testRunner.AndAsync("my Learning Path has multiple Learning Sessions", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
await testRunner.WhenAsync("I complete all content and assessments in the current Learning Session", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
await testRunner.ThenAsync("the system should mark the session as \"Completed\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 39
await testRunner.AndAsync("I should be able to proceed to the next Learning Session in the path", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
await testRunner.AndAsync("my progress should be tracked and visible", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Skipping a learning session")]
        [Xunit.TraitAttribute("FeatureTitle", "Creating a Personalized Language Learning Journey")]
        [Xunit.TraitAttribute("Description", "Skipping a learning session")]
        public async System.Threading.Tasks.Task SkippingALearningSession()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Skipping a learning session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 43
await testRunner.GivenAsync("I have an active Learning Journey for \"Spanish\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 44
await testRunner.AndAsync("my Learning Path has multiple Learning Sessions", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
await testRunner.WhenAsync("I choose to skip the current Learning Session", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 46
await testRunner.ThenAsync("the system should allow me to access the next Learning Session", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 47
await testRunner.AndAsync("the skipped session should be marked accordingly", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
await testRunner.AndAsync("I should be informed that skipping may affect my overall learning progress", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Completing a learning path")]
        [Xunit.TraitAttribute("FeatureTitle", "Creating a Personalized Language Learning Journey")]
        [Xunit.TraitAttribute("Description", "Completing a learning path")]
        public async System.Threading.Tasks.Task CompletingALearningPath()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Completing a learning path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 51
await testRunner.GivenAsync("I have an active Learning Journey for \"Spanish\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 52
await testRunner.AndAsync("I have completed or skipped all Learning Sessions in my current path", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
await testRunner.WhenAsync("I finish the final session in the path", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
await testRunner.ThenAsync("the system should mark the Learning Path as \"Completed\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 55
await testRunner.AndAsync("I should be presented with an option to generate a new Learning Path", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
await testRunner.AndAsync("my proficiency levels should be reassessed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Abandoning a learning path")]
        [Xunit.TraitAttribute("FeatureTitle", "Creating a Personalized Language Learning Journey")]
        [Xunit.TraitAttribute("Description", "Abandoning a learning path")]
        public async System.Threading.Tasks.Task AbandoningALearningPath()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Abandoning a learning path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 59
await testRunner.GivenAsync("I have an active Learning Journey for Spanish", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 60
await testRunner.WhenAsync("I choose to abandon my current Learning Path", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 61
await testRunner.ThenAsync("the system should mark the path as \"Abandoned\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Option",
                            "Description"});
                table3.AddRow(new string[] {
                            "Generate new path",
                            "Create a fresh Learning Path"});
                table3.AddRow(new string[] {
                            "Adjust learning goals",
                            "Modify my goals before creating a new path"});
                table3.AddRow(new string[] {
                            "Update proficiency levels",
                            "Reassess my current language skills"});
#line 62
await testRunner.AndAsync("I should be offered options to:", ((string)(null)), table3, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Updating learning goals and generating a new path")]
        [Xunit.TraitAttribute("FeatureTitle", "Creating a Personalized Language Learning Journey")]
        [Xunit.TraitAttribute("Description", "Updating learning goals and generating a new path")]
        public async System.Threading.Tasks.Task UpdatingLearningGoalsAndGeneratingANewPath()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Updating learning goals and generating a new path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 69
await testRunner.GivenAsync("I have an existing Learning Journey for Spanish", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Skill Type",
                            "New Practice Minutes",
                            "New Description"});
                table4.AddRow(new string[] {
                            "Speaking",
                            "40",
                            "Focus on business presentation skills"});
                table4.AddRow(new string[] {
                            "Vocabulary",
                            "25",
                            "Expand industry-specific terminology"});
#line 70
await testRunner.WhenAsync("I update my learning goals:", ((string)(null)), table4, "When ");
#line hidden
#line 74
await testRunner.AndAsync("I request a new Learning Path", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
await testRunner.ThenAsync("the system should generate a new path based on my updated goals", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 76
await testRunner.AndAsync("my Learning Journey should maintain my proficiency history", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 77
await testRunner.AndAsync("the new path should reflect my adjusted priorities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CreatingAPersonalizedLanguageLearningJourneyFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CreatingAPersonalizedLanguageLearningJourneyFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
